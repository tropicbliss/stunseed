#[derive(Clone, HtmlElement)]
pub struct Anchor {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<a>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)"]
pub fn a() -> Box<Anchor> {
    Box::new(Anchor {
        inner: crate::ast::DomElement::new("a"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Anchor {}
impl crate::attributes::ContainsGlobalAttributes for Anchor {}

impl Anchor {
    #[doc = "Address of the hyperlink"]
    #[inline]
    pub fn href<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "href",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Navigable for hyperlink navigation"]
    #[inline]
    pub fn target<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "target",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to download the resource instead of navigating to it, and its filename if so"]
    #[inline]
    pub fn download<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "download",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "URLs to ping"]
    #[inline]
    pub fn ping<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "ping",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Relationship between the location in the document containing the hyperlink and the destination resource"]
    #[inline]
    pub fn rel<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "rel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Language of the linked resource"]
    #[inline]
    pub fn hreflang<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "hreflang",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Hint for the type of the referenced resource"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Referrer policy for fetches initiated by the element"]
    #[inline]
    pub fn referrerpolicy<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "referrerpolicy",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Abbreviation {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<abbr>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr)"]
pub fn abbr() -> Box<Abbreviation> {
    Box::new(Abbreviation {
        inner: crate::ast::DomElement::new("abbr"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Abbreviation {}
impl crate::attributes::ContainsGlobalAttributes for Abbreviation {}

impl Abbreviation {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Address {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<address>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address)"]
pub fn address() -> Box<Address> {
    Box::new(Address {
        inner: crate::ast::DomElement::new("address"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Address {}
impl crate::attributes::ContainsGlobalAttributes for Address {}

impl Address {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct ImageMapArea {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<area>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area)"]
pub fn area() -> Box<ImageMapArea> {
    Box::new(ImageMapArea {
        inner: crate::ast::DomElement::new_void("area"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for ImageMapArea {}

impl ImageMapArea {
    #[doc = "Replacement text for use when images are not available"]
    #[inline]
    pub fn alt<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "alt",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Coordinates for the shape to be created in an image map"]
    #[inline]
    pub fn coords<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "coords",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "The kind of shape to be created in an image map"]
    #[inline]
    pub fn shape<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "shape",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Address of the hyperlink"]
    #[inline]
    pub fn href<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "href",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Navigable for hyperlink navigation"]
    #[inline]
    pub fn target<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "target",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to download the resource instead of navigating to it, and its filename if so"]
    #[inline]
    pub fn download<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "download",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "URLs to ping"]
    #[inline]
    pub fn ping<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "ping",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Relationship between the location in the document containing the hyperlink and the destination resource"]
    #[inline]
    pub fn rel<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "rel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Referrer policy for fetches initiated by the element"]
    #[inline]
    pub fn referrerpolicy<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "referrerpolicy",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Article {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<article>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article)"]
pub fn article() -> Box<Article> {
    Box::new(Article {
        inner: crate::ast::DomElement::new("article"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Article {}
impl crate::attributes::ContainsGlobalAttributes for Article {}

impl Article {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Aside {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<aside>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside)"]
pub fn aside() -> Box<Aside> {
    Box::new(Aside {
        inner: crate::ast::DomElement::new("aside"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Aside {}
impl crate::attributes::ContainsGlobalAttributes for Aside {}

impl Aside {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Audio {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<audio>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio)"]
pub fn audio() -> Box<Audio> {
    Box::new(Audio {
        inner: crate::ast::DomElement::new("audio"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Audio {}
impl crate::attributes::ContainsGlobalAttributes for Audio {}

impl Audio {
    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "How the element handles crossorigin requests"]
    #[inline]
    pub fn crossorigin<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "crossorigin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Hints how much buffering the media resource will likely need"]
    #[inline]
    pub fn preload<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "preload",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Hint that the media resource can be started automatically when the page is loaded"]
    #[inline]
    pub fn autoplay<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "autoplay",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to loop the media resource"]
    #[inline]
    pub fn loop_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "loop",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to mute the media resource by default"]
    #[inline]
    pub fn muted<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "muted",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Show user agent controls"]
    #[inline]
    pub fn controls<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Bold {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<b>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b)"]
pub fn b() -> Box<Bold> {
    Box::new(Bold {
        inner: crate::ast::DomElement::new("b"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Bold {}
impl crate::attributes::ContainsGlobalAttributes for Bold {}

impl Bold {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Base {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<base>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base)"]
pub fn base() -> Box<Base> {
    Box::new(Base {
        inner: crate::ast::DomElement::new_void("base"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for Base {}

impl Base {
    #[doc = "Document base URL"]
    #[inline]
    pub fn href<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "href",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Default navigable for hyperlink navigation and form submission"]
    #[inline]
    pub fn target<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "target",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct BidirectionalIsolate {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<bdi>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi)"]
pub fn bdi() -> Box<BidirectionalIsolate> {
    Box::new(BidirectionalIsolate {
        inner: crate::ast::DomElement::new("bdi"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for BidirectionalIsolate {}
impl crate::attributes::ContainsGlobalAttributes for BidirectionalIsolate {}

impl BidirectionalIsolate {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct BidirectionalTextOverride {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<bdo>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo)"]
pub fn bdo() -> Box<BidirectionalTextOverride> {
    Box::new(BidirectionalTextOverride {
        inner: crate::ast::DomElement::new("bdo"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for BidirectionalTextOverride {}
impl crate::attributes::ContainsGlobalAttributes for BidirectionalTextOverride {}

impl BidirectionalTextOverride {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct BlockQuote {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<blockquote>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote)"]
pub fn blockquote() -> Box<BlockQuote> {
    Box::new(BlockQuote {
        inner: crate::ast::DomElement::new("blockquote"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for BlockQuote {}
impl crate::attributes::ContainsGlobalAttributes for BlockQuote {}

impl BlockQuote {
    #[doc = "Link to the source of the quotation or more information about the edit"]
    #[inline]
    pub fn cite<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "cite",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Body {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<body>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body)"]
pub fn body() -> Box<Body> {
    Box::new(Body {
        inner: crate::ast::DomElement::new("body"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Body {}
impl crate::attributes::ContainsGlobalAttributes for Body {}

impl Body {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct LineBreak {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<br>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br)"]
pub fn br() -> Box<LineBreak> {
    Box::new(LineBreak {
        inner: crate::ast::DomElement::new_void("br"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for LineBreak {}

impl LineBreak {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Button {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<button>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button)"]
pub fn button() -> Box<Button> {
    Box::new(Button {
        inner: crate::ast::DomElement::new("button"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Button {}
impl crate::attributes::ContainsGlobalAttributes for Button {}

impl Button {
    #[doc = "Whether the form control is disabled"]
    #[inline]
    pub fn disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Associates the element with a form element"]
    #[inline]
    pub fn form<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "form",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "URL to use for form submission"]
    #[inline]
    pub fn form_action<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formaction",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Entry list encoding type to use for form submission"]
    #[inline]
    pub fn form_enctype<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formenctype",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Variant to use for form submission"]
    #[inline]
    pub fn form_method<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formmethod",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Bypass form control validation for form submission"]
    #[inline]
    pub fn form_no_validate(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "formnovalidate",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Navigable for form submission"]
    #[inline]
    pub fn form_target<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formtarget",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of the element to use for form submission and in the form.elements API"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Targets a popover element to toggle, show, or hide"]
    #[inline]
    pub fn popovertarget<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "popovertarget",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a targeted popover element is to be toggled, shown, or hidden"]
    #[inline]
    pub fn popovertargetaction<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "popovertargetaction",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Type of button"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Value to be used for form submission"]
    #[inline]
    pub fn value<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "value",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Canvas {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<canvas>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas)"]
pub fn canvas() -> Box<Canvas> {
    Box::new(Canvas {
        inner: crate::ast::DomElement::new("canvas"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Canvas {}
impl crate::attributes::ContainsGlobalAttributes for Canvas {}

impl Canvas {
    #[doc = "Horizontal dimension"]
    #[inline]
    pub fn width(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension"]
    #[inline]
    pub fn height(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Caption {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<caption>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption)"]
pub fn caption() -> Box<Caption> {
    Box::new(Caption {
        inner: crate::ast::DomElement::new("caption"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Caption {}
impl crate::attributes::ContainsGlobalAttributes for Caption {}

impl Caption {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Cite {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<cite>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite)"]
pub fn cite() -> Box<Cite> {
    Box::new(Cite {
        inner: crate::ast::DomElement::new("cite"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Cite {}
impl crate::attributes::ContainsGlobalAttributes for Cite {}

impl Cite {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Code {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<code>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code)"]
pub fn code() -> Box<Code> {
    Box::new(Code {
        inner: crate::ast::DomElement::new("code"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Code {}
impl crate::attributes::ContainsGlobalAttributes for Code {}

impl Code {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TableColumn {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<col>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col)"]
pub fn col() -> Box<TableColumn> {
    Box::new(TableColumn {
        inner: crate::ast::DomElement::new_void("col"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for TableColumn {}

impl TableColumn {
    #[doc = "Number of columns spanned by the element"]
    #[inline]
    pub fn span<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "span",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TableColumnGroup {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<colgroup>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup)"]
pub fn colgroup() -> Box<TableColumnGroup> {
    Box::new(TableColumnGroup {
        inner: crate::ast::DomElement::new("colgroup"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TableColumnGroup {}
impl crate::attributes::ContainsGlobalAttributes for TableColumnGroup {}

impl TableColumnGroup {
    #[doc = "Number of columns spanned by the element"]
    #[inline]
    pub fn span<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "span",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Data {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<data>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data)"]
pub fn data() -> Box<Data> {
    Box::new(Data {
        inner: crate::ast::DomElement::new("data"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Data {}
impl crate::attributes::ContainsGlobalAttributes for Data {}

impl Data {
    #[doc = "Machine-readable value"]
    #[inline]
    pub fn value<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "value",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct DataList {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<datalist>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist)"]
pub fn datalist() -> Box<DataList> {
    Box::new(DataList {
        inner: crate::ast::DomElement::new("datalist"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for DataList {}
impl crate::attributes::ContainsGlobalAttributes for DataList {}

impl DataList {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct DescriptionDetails {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<dd>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd)"]
pub fn dd() -> Box<DescriptionDetails> {
    Box::new(DescriptionDetails {
        inner: crate::ast::DomElement::new("dd"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for DescriptionDetails {}
impl crate::attributes::ContainsGlobalAttributes for DescriptionDetails {}

impl DescriptionDetails {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct DeletedText {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<del>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del)"]
pub fn del() -> Box<DeletedText> {
    Box::new(DeletedText {
        inner: crate::ast::DomElement::new("del"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for DeletedText {}
impl crate::attributes::ContainsGlobalAttributes for DeletedText {}

impl DeletedText {
    #[doc = "Link to the source of the quotation or more information about the edit"]
    #[inline]
    pub fn cite<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "cite",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Date and (optionally) time of the change"]
    #[inline]
    pub fn date_time<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "datetime",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Details {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<details>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details)"]
pub fn details() -> Box<Details> {
    Box::new(Details {
        inner: crate::ast::DomElement::new("details"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Details {}
impl crate::attributes::ContainsGlobalAttributes for Details {}

impl Details {
    #[doc = "Name of group of mutually-exclusive details elements"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the details are visible"]
    #[inline]
    pub fn open(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner
            .insert_attribute("open", crate::ast::AttributeValue::BooleanAttribute(value));
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Definition {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<dfn>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn)"]
pub fn dfn() -> Box<Definition> {
    Box::new(Definition {
        inner: crate::ast::DomElement::new("dfn"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Definition {}
impl crate::attributes::ContainsGlobalAttributes for Definition {}

impl Definition {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Dialog {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<dialog>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog)"]
pub fn dialog() -> Box<Dialog> {
    Box::new(Dialog {
        inner: crate::ast::DomElement::new("dialog"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Dialog {}
impl crate::attributes::ContainsGlobalAttributes for Dialog {}

impl Dialog {
    #[doc = "Whether the dialog box is showing"]
    #[inline]
    pub fn open(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner
            .insert_attribute("open", crate::ast::AttributeValue::BooleanAttribute(value));
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Division {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<div>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div)"]
pub fn div() -> Box<Division> {
    Box::new(Division {
        inner: crate::ast::DomElement::new("div"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Division {}
impl crate::attributes::ContainsGlobalAttributes for Division {}

impl Division {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct DescriptionList {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<dl>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl)"]
pub fn dl() -> Box<DescriptionList> {
    Box::new(DescriptionList {
        inner: crate::ast::DomElement::new("dl"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for DescriptionList {}
impl crate::attributes::ContainsGlobalAttributes for DescriptionList {}

impl DescriptionList {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct DescriptionTerm {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<dt>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt)"]
pub fn dt() -> Box<DescriptionTerm> {
    Box::new(DescriptionTerm {
        inner: crate::ast::DomElement::new("dt"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for DescriptionTerm {}
impl crate::attributes::ContainsGlobalAttributes for DescriptionTerm {}

impl DescriptionTerm {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Emphasis {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<em>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em)"]
pub fn em() -> Box<Emphasis> {
    Box::new(Emphasis {
        inner: crate::ast::DomElement::new("em"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Emphasis {}
impl crate::attributes::ContainsGlobalAttributes for Emphasis {}

impl Emphasis {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Embed {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<embed>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed)"]
pub fn embed() -> Box<Embed> {
    Box::new(Embed {
        inner: crate::ast::DomElement::new_void("embed"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for Embed {}

impl Embed {
    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Type of embedded resource"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Horizontal dimension"]
    #[inline]
    pub fn width<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension"]
    #[inline]
    pub fn height<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Fieldset {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<fieldset>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset)"]
pub fn fieldset() -> Box<Fieldset> {
    Box::new(Fieldset {
        inner: crate::ast::DomElement::new("fieldset"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Fieldset {}
impl crate::attributes::ContainsGlobalAttributes for Fieldset {}

impl Fieldset {
    #[doc = "Whether the descendant form controls, except any inside legend, are disabled"]
    #[inline]
    pub fn disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Associates the element with a form element"]
    #[inline]
    pub fn form<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "form",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of the element to use in the form.elements API."]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct FigureCaption {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<figcaption>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption)"]
pub fn figcaption() -> Box<FigureCaption> {
    Box::new(FigureCaption {
        inner: crate::ast::DomElement::new("figcaption"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for FigureCaption {}
impl crate::attributes::ContainsGlobalAttributes for FigureCaption {}

impl FigureCaption {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Figure {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<figure>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure)"]
pub fn figure() -> Box<Figure> {
    Box::new(Figure {
        inner: crate::ast::DomElement::new("figure"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Figure {}
impl crate::attributes::ContainsGlobalAttributes for Figure {}

impl Figure {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Footer {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<footer>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer)"]
pub fn footer() -> Box<Footer> {
    Box::new(Footer {
        inner: crate::ast::DomElement::new("footer"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Footer {}
impl crate::attributes::ContainsGlobalAttributes for Footer {}

impl Footer {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Form {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<form>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)"]
pub fn form() -> Box<Form> {
    Box::new(Form {
        inner: crate::ast::DomElement::new("form"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Form {}
impl crate::attributes::ContainsGlobalAttributes for Form {}

impl Form {
    #[doc = "Character encodings to use for form submission"]
    #[inline]
    pub fn accept_charset<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "accept-charset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "URL to use for form submission"]
    #[inline]
    pub fn action<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "action",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Default setting for autofill feature for controls in the form"]
    #[inline]
    pub fn autocomplete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Entry list encoding type to use for form submission"]
    #[inline]
    pub fn enctype<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "enctype",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Variant to use for form submission"]
    #[inline]
    pub fn method<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "method",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of form to use in the document.forms API"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Bypass form control validation for form submission"]
    #[inline]
    pub fn no_validate(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "novalidate",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Navigable for form submission"]
    #[inline]
    pub fn target<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "target",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Heading1 {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<h1>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1)"]
pub fn h1() -> Box<Heading1> {
    Box::new(Heading1 {
        inner: crate::ast::DomElement::new("h1"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Heading1 {}
impl crate::attributes::ContainsGlobalAttributes for Heading1 {}

impl Heading1 {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Heading2 {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<h2>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2)"]
pub fn h2() -> Box<Heading2> {
    Box::new(Heading2 {
        inner: crate::ast::DomElement::new("h2"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Heading2 {}
impl crate::attributes::ContainsGlobalAttributes for Heading2 {}

impl Heading2 {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Heading3 {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<h3>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3)"]
pub fn h3() -> Box<Heading3> {
    Box::new(Heading3 {
        inner: crate::ast::DomElement::new("h3"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Heading3 {}
impl crate::attributes::ContainsGlobalAttributes for Heading3 {}

impl Heading3 {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Heading4 {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<h4>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4)"]
pub fn h4() -> Box<Heading4> {
    Box::new(Heading4 {
        inner: crate::ast::DomElement::new("h4"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Heading4 {}
impl crate::attributes::ContainsGlobalAttributes for Heading4 {}

impl Heading4 {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Heading5 {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<h5>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5)"]
pub fn h5() -> Box<Heading5> {
    Box::new(Heading5 {
        inner: crate::ast::DomElement::new("h5"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Heading5 {}
impl crate::attributes::ContainsGlobalAttributes for Heading5 {}

impl Heading5 {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Heading6 {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<h6>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6)"]
pub fn h6() -> Box<Heading6> {
    Box::new(Heading6 {
        inner: crate::ast::DomElement::new("h6"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Heading6 {}
impl crate::attributes::ContainsGlobalAttributes for Heading6 {}

impl Heading6 {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Head {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<head>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head)"]
pub fn head() -> Box<Head> {
    Box::new(Head {
        inner: crate::ast::DomElement::new("head"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Head {}
impl crate::attributes::ContainsGlobalAttributes for Head {}

impl Head {}

#[derive(Clone, HtmlElement)]
pub struct Header {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<header>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header)"]
pub fn header() -> Box<Header> {
    Box::new(Header {
        inner: crate::ast::DomElement::new("header"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Header {}
impl crate::attributes::ContainsGlobalAttributes for Header {}

impl Header {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct HeadingGroup {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<hgroup>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup)"]
pub fn hgroup() -> Box<HeadingGroup> {
    Box::new(HeadingGroup {
        inner: crate::ast::DomElement::new("hgroup"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for HeadingGroup {}
impl crate::attributes::ContainsGlobalAttributes for HeadingGroup {}

impl HeadingGroup {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct ThematicBreak {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<hr>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr)"]
pub fn hr() -> Box<ThematicBreak> {
    Box::new(ThematicBreak {
        inner: crate::ast::DomElement::new_void("hr"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for ThematicBreak {}

impl ThematicBreak {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Html {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<html>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html)"]
pub fn html() -> Box<Html> {
    Box::new(Html {
        inner: crate::ast::DomElement::new("html"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for Html {}

impl Html {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Italic {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<i>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i)"]
pub fn i() -> Box<Italic> {
    Box::new(Italic {
        inner: crate::ast::DomElement::new("i"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Italic {}
impl crate::attributes::ContainsGlobalAttributes for Italic {}

impl Italic {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Iframe {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<iframe>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)"]
pub fn iframe() -> Box<Iframe> {
    Box::new(Iframe {
        inner: crate::ast::DomElement::new("iframe"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Iframe {}
impl crate::attributes::ContainsGlobalAttributes for Iframe {}

impl Iframe {
    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "A document to render in the iframe"]
    #[inline]
    pub fn srcdoc<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "srcdoc",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of content navigable"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Security rules for nested content"]
    #[inline]
    pub fn sandbox<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "sandbox",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Permissions policy to be applied to the iframe's contents"]
    #[inline]
    pub fn allow<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "allow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to allow the iframe's contents to use requestFullscreen()"]
    #[inline]
    pub fn allowfullscreen<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "allowfullscreen",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Horizontal dimension"]
    #[inline]
    pub fn width<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension"]
    #[inline]
    pub fn height<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Referrer policy for fetches initiated by the element"]
    #[inline]
    pub fn referrerpolicy<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "referrerpolicy",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Used when determining loading deferral"]
    #[inline]
    pub fn loading<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "loading",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Image {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<img>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)"]
pub fn img() -> Box<Image> {
    Box::new(Image {
        inner: crate::ast::DomElement::new_void("img"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for Image {}

impl Image {
    #[doc = "Replacement text for use when images are not available"]
    #[inline]
    pub fn alt<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "alt",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Images to use in different situations, e.g., high-resolution displays, small monitors, etc."]
    #[inline]
    pub fn srcset<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "srcset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Image sizes for different page layouts"]
    #[inline]
    pub fn sizes<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "sizes",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "How the element handles crossorigin requests"]
    #[inline]
    pub fn crossorigin<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "crossorigin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of image map to use"]
    #[inline]
    pub fn usemap<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "usemap",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the image is a server-side image map"]
    #[inline]
    pub fn ismap<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "ismap",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Horizontal dimension"]
    #[inline]
    pub fn width<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension"]
    #[inline]
    pub fn height<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Referrer policy for fetches initiated by the element"]
    #[inline]
    pub fn referrerpolicy<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "referrerpolicy",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Decoding hint to use when processing this image for presentation"]
    #[inline]
    pub fn decoding<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "decoding",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Used when determining loading deferral"]
    #[inline]
    pub fn loading<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "loading",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Sets the priority for fetches initiated by the element"]
    #[inline]
    pub fn fetchpriority<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "fetchpriority",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Input {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<input>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)"]
pub fn input() -> Box<Input> {
    Box::new(Input {
        inner: crate::ast::DomElement::new_void("input"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for Input {}

impl Input {
    #[doc = "Hint for expected file type in file upload controls"]
    #[inline]
    pub fn accept<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "accept",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Replacement text for use when images are not available"]
    #[inline]
    pub fn alt<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "alt",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Hint for form autofill feature"]
    #[inline]
    pub fn autocomplete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the control is checked"]
    #[inline]
    pub fn checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of form control to use for sending the element's directionality in form submission"]
    #[inline]
    pub fn dirname<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "dirname",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the form control is disabled"]
    #[inline]
    pub fn disabled<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Associates the element with a form element"]
    #[inline]
    pub fn form<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "form",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "URL to use for form submission"]
    #[inline]
    pub fn formaction<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formaction",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Entry list encoding type to use for form submission"]
    #[inline]
    pub fn formenctype<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formenctype",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Variant to use for form submission"]
    #[inline]
    pub fn formmethod<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formmethod",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Bypass form control validation for form submission"]
    #[inline]
    pub fn formnovalidate<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formnovalidate",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Navigable for form submission"]
    #[inline]
    pub fn formtarget<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "formtarget",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension"]
    #[inline]
    pub fn height<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "List of autocomplete options"]
    #[inline]
    pub fn list<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "list",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Maximum value"]
    #[inline]
    pub fn max<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "max",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Maximum length of value"]
    #[inline]
    pub fn maxlength<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "maxlength",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Minimum value"]
    #[inline]
    pub fn min<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "min",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Minimum length of value"]
    #[inline]
    pub fn minlength<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "minlength",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to allow multiple values"]
    #[inline]
    pub fn multiple<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "multiple",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of the element to use for form submission and in the form.elements API"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Pattern to be matched by the form control's value"]
    #[inline]
    pub fn pattern<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "pattern",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "User-visible label to be placed within the form control"]
    #[inline]
    pub fn placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Targets a popover element to toggle, show, or hide"]
    #[inline]
    pub fn popovertarget<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "popovertarget",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a targeted popover element is to be toggled, shown, or hidden"]
    #[inline]
    pub fn popovertargetaction<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "popovertargetaction",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to allow the value to be edited by the user"]
    #[inline]
    pub fn readonly<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "readonly",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the control is required for form submission"]
    #[inline]
    pub fn required<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "required",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Size of the control"]
    #[inline]
    pub fn size<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "size",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Granularity to be matched by the form control's value"]
    #[inline]
    pub fn step<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "step",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Type of form control"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Value of the form control"]
    #[inline]
    pub fn value<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "value",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Horizontal dimension"]
    #[inline]
    pub fn width<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct InsertedText {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<ins>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins)"]
pub fn ins() -> Box<InsertedText> {
    Box::new(InsertedText {
        inner: crate::ast::DomElement::new("ins"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for InsertedText {}
impl crate::attributes::ContainsGlobalAttributes for InsertedText {}

impl InsertedText {
    #[doc = "Link to the source of the quotation or more information about the edit"]
    #[inline]
    pub fn cite<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "cite",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Date and (optionally) time of the change"]
    #[inline]
    pub fn date_time<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "datetime",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct KeyboardInput {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<kbd>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd)"]
pub fn kbd() -> Box<KeyboardInput> {
    Box::new(KeyboardInput {
        inner: crate::ast::DomElement::new("kbd"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for KeyboardInput {}
impl crate::attributes::ContainsGlobalAttributes for KeyboardInput {}

impl KeyboardInput {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Label {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<label>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label)"]
pub fn label() -> Box<Label> {
    Box::new(Label {
        inner: crate::ast::DomElement::new("label"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Label {}
impl crate::attributes::ContainsGlobalAttributes for Label {}

impl Label {
    #[doc = "Associate the label with form control"]
    #[inline]
    pub fn for_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "for",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Legend {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<legend>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend)"]
pub fn legend() -> Box<Legend> {
    Box::new(Legend {
        inner: crate::ast::DomElement::new("legend"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Legend {}
impl crate::attributes::ContainsGlobalAttributes for Legend {}

impl Legend {
    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct ListItem {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<li>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li)"]
pub fn li() -> Box<ListItem> {
    Box::new(ListItem {
        inner: crate::ast::DomElement::new("li"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for ListItem {}
impl crate::attributes::ContainsGlobalAttributes for ListItem {}

impl ListItem {
    #[doc = "Ordinal value of the list item. Only if the element is not a child of an `ul` or `menu` element."]
    #[inline]
    pub fn value<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "value",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Link {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<link>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)"]
pub fn link() -> Box<Link> {
    Box::new(Link {
        inner: crate::ast::DomElement::new_void("link"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for Link {}

impl Link {
    #[doc = "Address of the hyperlink"]
    #[inline]
    pub fn href<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "href",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "How the element handles crossorigin requests"]
    #[inline]
    pub fn crossorigin<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "crossorigin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Relationship between the document containing the hyperlink and the destination resource"]
    #[inline]
    pub fn rel<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "rel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Applicable media"]
    #[inline]
    pub fn media<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "media",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Integrity metadata used in Subresource Integrity checks [SRI]"]
    #[inline]
    pub fn integrity<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "integrity",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Language of the linked resource"]
    #[inline]
    pub fn hreflang<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "hreflang",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Hint for the type of the referenced resource"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Referrer policy for fetches initiated by the element"]
    #[inline]
    pub fn referrerpolicy<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "referrerpolicy",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Sizes of the icons (for rel=\"icon\")"]
    #[inline]
    pub fn sizes<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "sizes",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (for rel=\"preload\")"]
    #[inline]
    pub fn imagesrcset<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "imagesrcset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Image sizes for different page layouts (for rel=\"preload\")"]
    #[inline]
    pub fn imagesizes<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "imagesizes",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Potential destination for a preload request (for rel=\"preload\" and rel=\"modulepreload\")"]
    #[inline]
    pub fn as_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner
            .insert_attribute("as", crate::ast::AttributeValue::KeyValuePair(value.into()));
        self
    }

    #[doc = "Whether the element is potentially render-blocking"]
    #[inline]
    pub fn blocking<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "blocking",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Color to use when customizing a site's icon (for rel=\"mask-icon\")"]
    #[inline]
    pub fn color<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "color",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the link is disabled"]
    #[inline]
    pub fn disabled<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Sets the priority for fetches initiated by the element"]
    #[inline]
    pub fn fetchpriority<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "fetchpriority",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Main {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<main>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main)"]
pub fn main() -> Box<Main> {
    Box::new(Main {
        inner: crate::ast::DomElement::new("main"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Main {}
impl crate::attributes::ContainsGlobalAttributes for Main {}

impl Main {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct ImageMap {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<map>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map)"]
pub fn map() -> Box<ImageMap> {
    Box::new(ImageMap {
        inner: crate::ast::DomElement::new("map"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for ImageMap {}
impl crate::attributes::ContainsGlobalAttributes for ImageMap {}

impl ImageMap {
    #[doc = "Name of image map to reference from the usemap attribute"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct MarkText {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<mark>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark)"]
pub fn mark() -> Box<MarkText> {
    Box::new(MarkText {
        inner: crate::ast::DomElement::new("mark"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for MarkText {}
impl crate::attributes::ContainsGlobalAttributes for MarkText {}

impl MarkText {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Menu {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<menu>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu)"]
pub fn menu() -> Box<Menu> {
    Box::new(Menu {
        inner: crate::ast::DomElement::new("menu"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Menu {}
impl crate::attributes::ContainsGlobalAttributes for Menu {}

impl Menu {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Meta {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<meta>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta)"]
pub fn meta() -> Box<Meta> {
    Box::new(Meta {
        inner: crate::ast::DomElement::new_void("meta"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for Meta {}

impl Meta {
    #[doc = "Metadata name"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Pragma directive"]
    #[inline]
    pub fn http_equiv<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "http-equiv",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Value of the element"]
    #[inline]
    pub fn content<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "content",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Character encoding declaration"]
    #[inline]
    pub fn charset<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "charset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Applicable media"]
    #[inline]
    pub fn media<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "media",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Meter {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<meter>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter)"]
pub fn meter() -> Box<Meter> {
    Box::new(Meter {
        inner: crate::ast::DomElement::new("meter"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Meter {}
impl crate::attributes::ContainsGlobalAttributes for Meter {}

impl Meter {
    #[doc = "Current value of the element"]
    #[inline]
    pub fn value(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "value",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Lower bound of range"]
    #[inline]
    pub fn min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "min",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Upper bound of range"]
    #[inline]
    pub fn max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "max",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "High limit of low range"]
    #[inline]
    pub fn low(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "low",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Low limit of high range"]
    #[inline]
    pub fn high(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "high",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Optimum value in gauge"]
    #[inline]
    pub fn optimum(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "optimum",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Navigation {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<nav>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav)"]
pub fn nav() -> Box<Navigation> {
    Box::new(Navigation {
        inner: crate::ast::DomElement::new("nav"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Navigation {}
impl crate::attributes::ContainsGlobalAttributes for Navigation {}

impl Navigation {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct NoScript {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<noscript>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript)"]
pub fn noscript() -> Box<NoScript> {
    Box::new(NoScript {
        inner: crate::ast::DomElement::new("noscript"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for NoScript {}
impl crate::attributes::ContainsGlobalAttributes for NoScript {}

impl NoScript {}

#[derive(Clone, HtmlElement)]
pub struct Object {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<object>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object)"]
pub fn object() -> Box<Object> {
    Box::new(Object {
        inner: crate::ast::DomElement::new("object"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Object {}
impl crate::attributes::ContainsGlobalAttributes for Object {}

impl Object {
    #[doc = "Address of the resource"]
    #[inline]
    pub fn data<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "data",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Type of embedded resource"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of content navigable"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Associates the element with a form element"]
    #[inline]
    pub fn form<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "form",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Horizontal dimension"]
    #[inline]
    pub fn width<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension"]
    #[inline]
    pub fn height<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct OrderedList {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<ol>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol)"]
pub fn ol() -> Box<OrderedList> {
    Box::new(OrderedList {
        inner: crate::ast::DomElement::new("ol"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for OrderedList {}
impl crate::attributes::ContainsGlobalAttributes for OrderedList {}

impl OrderedList {
    #[doc = "Number the list backwards"]
    #[inline]
    pub fn reversed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "reversed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Starting value of the list"]
    #[inline]
    pub fn start<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "start",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Kind of list marker"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct OptionGroup {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<optgroup>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup)"]
pub fn optgroup() -> Box<OptionGroup> {
    Box::new(OptionGroup {
        inner: crate::ast::DomElement::new("optgroup"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for OptionGroup {}
impl crate::attributes::ContainsGlobalAttributes for OptionGroup {}

impl OptionGroup {
    #[doc = "Whether the form control is disabled"]
    #[inline]
    pub fn disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "User-visible label"]
    #[inline]
    pub fn label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Option {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<option>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option)"]
pub fn option() -> Box<Option> {
    Box::new(Option {
        inner: crate::ast::DomElement::new("option"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Option {}
impl crate::attributes::ContainsGlobalAttributes for Option {}

impl Option {
    #[doc = "Whether the form control is disabled"]
    #[inline]
    pub fn disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "User-visible label"]
    #[inline]
    pub fn label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the option is selected by default"]
    #[inline]
    pub fn selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Value to be used for form submission"]
    #[inline]
    pub fn value<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "value",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Output {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<output>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output)"]
pub fn output() -> Box<Output> {
    Box::new(Output {
        inner: crate::ast::DomElement::new("output"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Output {}
impl crate::attributes::ContainsGlobalAttributes for Output {}

impl Output {
    #[doc = "Specifies controls from which the output was calculated"]
    #[inline]
    pub fn for_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "for",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Associates the element with a form element"]
    #[inline]
    pub fn form<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "form",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of the element to use in the form.elements API."]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Paragraph {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<p>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)"]
pub fn p() -> Box<Paragraph> {
    Box::new(Paragraph {
        inner: crate::ast::DomElement::new("p"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Paragraph {}
impl crate::attributes::ContainsGlobalAttributes for Paragraph {}

impl Paragraph {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Picture {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<picture>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture)"]
pub fn picture() -> Box<Picture> {
    Box::new(Picture {
        inner: crate::ast::DomElement::new("picture"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Picture {}
impl crate::attributes::ContainsGlobalAttributes for Picture {}

impl Picture {
    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct PreformattedText {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<pre>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre)"]
pub fn pre() -> Box<PreformattedText> {
    Box::new(PreformattedText {
        inner: crate::ast::DomElement::new("pre"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for PreformattedText {}
impl crate::attributes::ContainsGlobalAttributes for PreformattedText {}

impl PreformattedText {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Progress {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<progress>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress)"]
pub fn progress() -> Box<Progress> {
    Box::new(Progress {
        inner: crate::ast::DomElement::new("progress"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Progress {}
impl crate::attributes::ContainsGlobalAttributes for Progress {}

impl Progress {
    #[doc = "Current value of the element"]
    #[inline]
    pub fn value(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "value",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Upper bound of range"]
    #[inline]
    pub fn max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "max",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Quotation {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<q>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q)"]
pub fn q() -> Box<Quotation> {
    Box::new(Quotation {
        inner: crate::ast::DomElement::new("q"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Quotation {}
impl crate::attributes::ContainsGlobalAttributes for Quotation {}

impl Quotation {
    #[doc = "Link to the source of the quotation or more information about the edit"]
    #[inline]
    pub fn cite<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "cite",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct RubyFallbackParenthesis {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<rp>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp)"]
pub fn rp() -> Box<RubyFallbackParenthesis> {
    Box::new(RubyFallbackParenthesis {
        inner: crate::ast::DomElement::new("rp"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for RubyFallbackParenthesis {}
impl crate::attributes::ContainsGlobalAttributes for RubyFallbackParenthesis {}

impl RubyFallbackParenthesis {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct RubyText {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<rt>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt)"]
pub fn rt() -> Box<RubyText> {
    Box::new(RubyText {
        inner: crate::ast::DomElement::new("rt"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for RubyText {}
impl crate::attributes::ContainsGlobalAttributes for RubyText {}

impl RubyText {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct RubyAnnotation {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<ruby>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby)"]
pub fn ruby() -> Box<RubyAnnotation> {
    Box::new(RubyAnnotation {
        inner: crate::ast::DomElement::new("ruby"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for RubyAnnotation {}
impl crate::attributes::ContainsGlobalAttributes for RubyAnnotation {}

impl RubyAnnotation {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct StrikeThrough {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<s>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s)"]
pub fn s() -> Box<StrikeThrough> {
    Box::new(StrikeThrough {
        inner: crate::ast::DomElement::new("s"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for StrikeThrough {}
impl crate::attributes::ContainsGlobalAttributes for StrikeThrough {}

impl StrikeThrough {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct SampleOutput {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<samp>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp)"]
pub fn samp() -> Box<SampleOutput> {
    Box::new(SampleOutput {
        inner: crate::ast::DomElement::new("samp"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for SampleOutput {}
impl crate::attributes::ContainsGlobalAttributes for SampleOutput {}

impl SampleOutput {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Script {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<script>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script)"]
pub fn script() -> Box<Script> {
    Box::new(Script {
        inner: crate::ast::DomElement::new("script"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Script {}
impl crate::attributes::ContainsGlobalAttributes for Script {}

impl Script {
    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Type of script"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Prevents execution in user agents that support module scripts"]
    #[inline]
    pub fn nomodule<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "nomodule",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Execute script when available, without blocking while fetching"]
    #[inline]
    pub fn async_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "async",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defer script execution"]
    #[inline]
    pub fn defer<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "defer",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "How the element handles crossorigin requests"]
    #[inline]
    pub fn crossorigin<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "crossorigin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Integrity metadata used in Subresource Integrity checks [SRI]"]
    #[inline]
    pub fn integrity<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "integrity",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Referrer policy for fetches initiated by the element"]
    #[inline]
    pub fn referrerpolicy<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "referrerpolicy",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the element is potentially render-blocking"]
    #[inline]
    pub fn blocking<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "blocking",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Sets the priority for fetches initiated by the element"]
    #[inline]
    pub fn fetchpriority<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "fetchpriority",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Search {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<search>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search)"]
pub fn search() -> Box<Search> {
    Box::new(Search {
        inner: crate::ast::DomElement::new("search"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Search {}
impl crate::attributes::ContainsGlobalAttributes for Search {}

impl Search {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Section {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<section>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section)"]
pub fn section() -> Box<Section> {
    Box::new(Section {
        inner: crate::ast::DomElement::new("section"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Section {}
impl crate::attributes::ContainsGlobalAttributes for Section {}

impl Section {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Select {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<select>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select)"]
pub fn select() -> Box<Select> {
    Box::new(Select {
        inner: crate::ast::DomElement::new("select"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Select {}
impl crate::attributes::ContainsGlobalAttributes for Select {}

impl Select {
    #[doc = "Hint for form autofill feature"]
    #[inline]
    pub fn autocomplete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the form control is disabled"]
    #[inline]
    pub fn disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Associates the element with a form element"]
    #[inline]
    pub fn form<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "form",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to allow multiple values"]
    #[inline]
    pub fn multiple(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "multiple",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Name of the element to use for form submission and in the form.elements API"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the control is required for form submission"]
    #[inline]
    pub fn required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Size of the control"]
    #[inline]
    pub fn size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "size",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Slot {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<slot>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot)"]
pub fn slot() -> Box<Slot> {
    Box::new(Slot {
        inner: crate::ast::DomElement::new("slot"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Slot {}
impl crate::attributes::ContainsGlobalAttributes for Slot {}

impl Slot {
    #[doc = "Name of shadow tree slot"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct SideComment {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<small>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small)"]
pub fn small() -> Box<SideComment> {
    Box::new(SideComment {
        inner: crate::ast::DomElement::new("small"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for SideComment {}
impl crate::attributes::ContainsGlobalAttributes for SideComment {}

impl SideComment {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct MediaSource {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<source>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source)"]
pub fn source() -> Box<MediaSource> {
    Box::new(MediaSource {
        inner: crate::ast::DomElement::new_void("source"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for MediaSource {}

impl MediaSource {
    #[doc = "Type of embedded resource"]
    #[inline]
    pub fn type_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "type",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Applicable media"]
    #[inline]
    pub fn media<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "media",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Address of the resource (in audio or video)"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Images to use in different situations, e.g., high-resolution displays, small monitors, etc. (in picture)"]
    #[inline]
    pub fn srcset<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "srcset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Image sizes for different page layouts (in picture)"]
    #[inline]
    pub fn sizes<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "sizes",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Horizontal dimension (in picture)"]
    #[inline]
    pub fn width(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension (in picture)"]
    #[inline]
    pub fn height(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Span {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<span>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span)"]
pub fn span() -> Box<Span> {
    Box::new(Span {
        inner: crate::ast::DomElement::new("span"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Span {}
impl crate::attributes::ContainsGlobalAttributes for Span {}

impl Span {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Strong {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<strong>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong)"]
pub fn strong() -> Box<Strong> {
    Box::new(Strong {
        inner: crate::ast::DomElement::new("strong"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Strong {}
impl crate::attributes::ContainsGlobalAttributes for Strong {}

impl Strong {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Style {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<style>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style)"]
pub fn style() -> Box<Style> {
    Box::new(Style {
        inner: crate::ast::DomElement::new("style"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Style {}
impl crate::attributes::ContainsGlobalAttributes for Style {}

impl Style {
    #[doc = "Applicable media"]
    #[inline]
    pub fn media<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "media",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the element is potentially render-blocking"]
    #[inline]
    pub fn blocking<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "blocking",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct SubScript {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<sub>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub)"]
pub fn sub() -> Box<SubScript> {
    Box::new(SubScript {
        inner: crate::ast::DomElement::new("sub"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for SubScript {}
impl crate::attributes::ContainsGlobalAttributes for SubScript {}

impl SubScript {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Summary {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<summary>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary)"]
pub fn summary() -> Box<Summary> {
    Box::new(Summary {
        inner: crate::ast::DomElement::new("summary"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Summary {}
impl crate::attributes::ContainsGlobalAttributes for Summary {}

impl Summary {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct SuperScript {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<sup>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup)"]
pub fn sup() -> Box<SuperScript> {
    Box::new(SuperScript {
        inner: crate::ast::DomElement::new("sup"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for SuperScript {}
impl crate::attributes::ContainsGlobalAttributes for SuperScript {}

impl SuperScript {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Table {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<table>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table)"]
pub fn table() -> Box<Table> {
    Box::new(Table {
        inner: crate::ast::DomElement::new("table"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Table {}
impl crate::attributes::ContainsGlobalAttributes for Table {}

impl Table {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TableBody {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<tbody>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody)"]
pub fn tbody() -> Box<TableBody> {
    Box::new(TableBody {
        inner: crate::ast::DomElement::new("tbody"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TableBody {}
impl crate::attributes::ContainsGlobalAttributes for TableBody {}

impl TableBody {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TableCell {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<td>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td)"]
pub fn td() -> Box<TableCell> {
    Box::new(TableCell {
        inner: crate::ast::DomElement::new("td"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TableCell {}
impl crate::attributes::ContainsGlobalAttributes for TableCell {}

impl TableCell {
    #[doc = "Number of columns that the cell is to span"]
    #[inline]
    pub fn colspan<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Number of rows that the cell is to span"]
    #[inline]
    pub fn rowspan<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "The header cells for this cell"]
    #[inline]
    pub fn headers<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "headers",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Template {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<template>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template)"]
pub fn template() -> Box<Template> {
    Box::new(Template {
        inner: crate::ast::DomElement::new("template"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Template {}
impl crate::attributes::ContainsGlobalAttributes for Template {}

impl Template {}

#[derive(Clone, HtmlElement)]
pub struct TextArea {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<textarea>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea)"]
pub fn textarea() -> Box<TextArea> {
    Box::new(TextArea {
        inner: crate::ast::DomElement::new("textarea"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TextArea {}
impl crate::attributes::ContainsGlobalAttributes for TextArea {}

impl TextArea {
    #[doc = "Hint for form autofill feature"]
    #[inline]
    pub fn autocomplete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Maximum number of characters per line"]
    #[inline]
    pub fn cols(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "cols",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of form control to use for sending the element's directionality in form submission"]
    #[inline]
    pub fn dir_name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "dirname",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether the form control is disabled"]
    #[inline]
    pub fn disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Associates the element with a form element"]
    #[inline]
    pub fn form<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "form",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Maximum length of value"]
    #[inline]
    pub fn max_length(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "maxlength",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Minimum length of value"]
    #[inline]
    pub fn min_length(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "minlength",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Name of the element to use for form submission and in the form.elements API"]
    #[inline]
    pub fn name<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "name",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "User-visible label to be placed within the form control"]
    #[inline]
    pub fn placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to allow the value to be edited by the user"]
    #[inline]
    pub fn read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Whether the control is required for form submission"]
    #[inline]
    pub fn required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Number of lines to show"]
    #[inline]
    pub fn rows(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "rows",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "How the value of the form control is to be wrapped for form submission"]
    #[inline]
    pub fn wrap<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "wrap",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TableFoot {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<tfoot>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot)"]
pub fn tfoot() -> Box<TableFoot> {
    Box::new(TableFoot {
        inner: crate::ast::DomElement::new("tfoot"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TableFoot {}
impl crate::attributes::ContainsGlobalAttributes for TableFoot {}

impl TableFoot {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TableHeader {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<th>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th)"]
pub fn th() -> Box<TableHeader> {
    Box::new(TableHeader {
        inner: crate::ast::DomElement::new("th"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TableHeader {}
impl crate::attributes::ContainsGlobalAttributes for TableHeader {}

impl TableHeader {
    #[doc = "Number of columns that the cell is to span"]
    #[inline]
    pub fn colspan<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Number of rows that the cell is to span"]
    #[inline]
    pub fn rowspan<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "The header cells for this cell"]
    #[inline]
    pub fn headers<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "headers",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Specifies which cells the header cell applies to"]
    #[inline]
    pub fn scope<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "scope",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Alternative label to use for the header cell when referencing the cell in other contexts"]
    #[inline]
    pub fn abbr<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "abbr",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TableHead {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<thead>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead)"]
pub fn thead() -> Box<TableHead> {
    Box::new(TableHead {
        inner: crate::ast::DomElement::new("thead"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TableHead {}
impl crate::attributes::ContainsGlobalAttributes for TableHead {}

impl TableHead {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Time {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<time>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time)"]
pub fn time() -> Box<Time> {
    Box::new(Time {
        inner: crate::ast::DomElement::new("time"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Time {}
impl crate::attributes::ContainsGlobalAttributes for Time {}

impl Time {
    #[doc = "Machine-readable value"]
    #[inline]
    pub fn date_time<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "datetime",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Title {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<title>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title)"]
pub fn title() -> Box<Title> {
    Box::new(Title {
        inner: crate::ast::DomElement::new("title"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Title {}
impl crate::attributes::ContainsGlobalAttributes for Title {}

impl Title {}

#[derive(Clone, HtmlElement)]
pub struct TableRow {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<tr>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr)"]
pub fn tr() -> Box<TableRow> {
    Box::new(TableRow {
        inner: crate::ast::DomElement::new("tr"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for TableRow {}
impl crate::attributes::ContainsGlobalAttributes for TableRow {}

impl TableRow {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct TextTrack {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<track>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track)"]
pub fn track() -> Box<TextTrack> {
    Box::new(TextTrack {
        inner: crate::ast::DomElement::new_void("track"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for TextTrack {}

impl TextTrack {
    #[doc = "The type of text track"]
    #[inline]
    pub fn kind<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "kind",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Language of the text track"]
    #[inline]
    pub fn srclang<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "srclang",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "User-visible label"]
    #[inline]
    pub fn label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Enable the track if no other text track is more suitable"]
    #[inline]
    pub fn default(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "default",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Underline {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<u>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u)"]
pub fn u() -> Box<Underline> {
    Box::new(Underline {
        inner: crate::ast::DomElement::new("u"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Underline {}
impl crate::attributes::ContainsGlobalAttributes for Underline {}

impl Underline {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct UnorderedList {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<ul>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul)"]
pub fn ul() -> Box<UnorderedList> {
    Box::new(UnorderedList {
        inner: crate::ast::DomElement::new("ul"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for UnorderedList {}
impl crate::attributes::ContainsGlobalAttributes for UnorderedList {}

impl UnorderedList {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Variable {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<var>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var)"]
pub fn var() -> Box<Variable> {
    Box::new(Variable {
        inner: crate::ast::DomElement::new("var"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Variable {}
impl crate::attributes::ContainsGlobalAttributes for Variable {}

impl Variable {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made."]
    #[inline]
    pub fn aria_auto_complete<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-autocomplete",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected."]
    #[inline]
    pub fn aria_checked<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-checked",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex."]
    #[inline]
    pub fn aria_col_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan."]
    #[inline]
    pub fn aria_col_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext."]
    #[inline]
    pub fn aria_col_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-colindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan."]
    #[inline]
    pub fn aria_col_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-colspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the hierarchical level of an element within a structure."]
    #[inline]
    pub fn aria_level(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-level",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether an element is modal when displayed."]
    #[inline]
    pub fn aria_modal(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-modal",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether a text box accepts multiple lines of input or only a single line."]
    #[inline]
    pub fn aria_multi_line(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates that the user can select more than one item from the current selectable descendants."]
    #[inline]
    pub fn aria_multi_selectable(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-multiselectable",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."]
    #[inline]
    pub fn aria_orientation<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-orientation",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format."]
    #[inline]
    pub fn aria_placeholder<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-placeholder",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize."]
    #[inline]
    pub fn aria_pos_in_set(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-posinset",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected."]
    #[inline]
    pub fn aria_pressed<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-pressed",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = " Indicates that the element is not editable, but is otherwise operable. See related aria-disabled."]
    #[inline]
    pub fn aria_read_only(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-readonly",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that user input is required on the element before a form can be submitted."]
    #[inline]
    pub fn aria_required(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-required",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex."]
    #[inline]
    pub fn aria_row_count(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowcount",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan."]
    #[inline]
    pub fn aria_row_index(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowindex",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext."]
    #[inline]
    pub fn aria_row_index_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-rowindextext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan."]
    #[inline]
    pub fn aria_row_span(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-rowspan",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed."]
    #[inline]
    pub fn aria_selected(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-selected",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset."]
    #[inline]
    pub fn aria_set_size(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-setsize",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates if items in a table or grid are sorted in ascending or descending order."]
    #[inline]
    pub fn aria_sort<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-sort",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the maximum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_max(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemax",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the minimum allowed value for a range widget."]
    #[inline]
    pub fn aria_value_min(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuemin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the current value for a range widget. See related aria-valuetext."]
    #[inline]
    pub fn aria_value_now(mut self: Box<Self>, value: f64) -> Box<Self> {
        let mut buffer = ryu::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "aria-valuenow",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines the human readable text alternative of aria-valuenow for a range widget."]
    #[inline]
    pub fn aria_value_text<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-valuetext",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct Video {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<video>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video)"]
pub fn video() -> Box<Video> {
    Box::new(Video {
        inner: crate::ast::DomElement::new("video"),
    })
}

unsafe impl crate::html::NonVoidHtmlElement for Video {}
impl crate::attributes::ContainsGlobalAttributes for Video {}

impl Video {
    #[doc = "Address of the resource"]
    #[inline]
    pub fn src<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "src",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "How the element handles crossorigin requests"]
    #[inline]
    pub fn crossorigin<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "crossorigin",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Poster frame to show prior to video playback"]
    #[inline]
    pub fn poster<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "poster",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Hints how much buffering the media resource will likely need"]
    #[inline]
    pub fn preload<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "preload",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Hint that the media resource can be started automatically when the page is loaded"]
    #[inline]
    pub fn autoplay<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "autoplay",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Encourage the user agent to display video content within the element's playback area"]
    #[inline]
    pub fn plays_inline(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "playsinline",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Whether to loop the media resource"]
    #[inline]
    pub fn loop_<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "loop",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Whether to mute the media resource by default"]
    #[inline]
    pub fn muted<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "muted",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Show user agent controls"]
    #[inline]
    pub fn controls<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Horizontal dimension"]
    #[inline]
    pub fn width(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "width",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Vertical dimension"]
    #[inline]
    pub fn height(mut self: Box<Self>, value: i64) -> Box<Self> {
        let mut buffer = itoa::Buffer::new();
        let value = buffer.format(value).to_string();
        self.inner.insert_attribute(
            "height",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application."]
    #[inline]
    pub fn aria_active_descendant_element<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-activedescendant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."]
    #[inline]
    pub fn aria_atomic(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-atomic",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label."]
    #[inline]
    pub fn aria_braille_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-braillelabel",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription."]
    #[inline]
    pub fn aria_braille_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-brailleroledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates an element is being modified and that assistive technologies could wait until the modifications are complete before exposing them to the user."]
    #[inline]
    pub fn aria_busy(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-busy",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns."]
    #[inline]
    pub fn aria_controls_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-controls",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates the element that represents the current item within a container or set of related elements."]
    #[inline]
    pub fn aria_current<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-current",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description."]
    #[inline]
    pub fn aria_described_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-describedby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that describes or annotates the current element. See related aria-describedby."]
    #[inline]
    pub fn aria_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-description",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby."]
    #[inline]
    pub fn aria_details_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-details",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly."]
    #[inline]
    pub fn aria_disabled(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-disabled",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target."]
    #[inline]
    pub fn aria_drop_effect<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-dropeffect",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby."]
    #[inline]
    pub fn aria_error_message_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-errormessage",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether a grouping element owned or controlled by this element is expanded or collapsed."]
    #[inline]
    pub fn aria_expanded(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-expanded",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order."]
    #[inline]
    pub fn aria_flow_to_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-flowto",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "[Deprecated in ARIA 1.1] Indicates an element's \"grabbed\" state in a drag-and-drop operation."]
    #[inline]
    pub fn aria_grabbed(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-grabbed",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."]
    #[inline]
    pub fn aria_has_popup<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-haspopup",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }

    #[doc = "Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage."]
    #[inline]
    pub fn aria_invalid<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-invalid",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element."]
    #[inline]
    pub fn aria_key_shortcuts<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-keyshortcuts",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a string value that labels the current element. See related aria-labelledby."]
    #[inline]
    pub fn aria_label<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-label",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby."]
    #[inline]
    pub fn aria_labelled_by_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-labelledby",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."]
    #[inline]
    pub fn aria_live<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-live",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls."]
    #[inline]
    pub fn aria_owns_elements<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-owns",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic."]
    #[inline]
    pub fn aria_relevant<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-relevant",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Defines a human-readable, author-localized description for the role of an element."]
    #[inline]
    pub fn aria_role_description<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "aria-roledescription",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }
}

#[derive(Clone, HtmlElement)]
pub struct LineBreakOpportunity {
    inner: crate::ast::DomElement,
}

#[doc = "The HTML `<wbr>` element\n\n[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr)"]
pub fn wbr() -> Box<LineBreakOpportunity> {
    Box::new(LineBreakOpportunity {
        inner: crate::ast::DomElement::new_void("wbr"),
    })
}

impl crate::attributes::ContainsGlobalAttributes for LineBreakOpportunity {}

impl LineBreakOpportunity {
    #[doc = "Describes the role(s) the current element plays in the context of the document."]
    #[inline]
    pub fn role<T>(mut self: Box<Self>, value: T) -> Box<Self>
    where
        T: Into<::std::borrow::Cow<'static, str>>,
    {
        self.inner.insert_attribute(
            "role",
            crate::ast::AttributeValue::KeyValuePair(value.into()),
        );
        self
    }

    #[doc = "Indicates whether the element is exposed to an accessibility API. See related aria-disabled."]
    #[inline]
    pub fn aria_hidden(mut self: Box<Self>, value: bool) -> Box<Self> {
        self.inner.insert_attribute(
            "aria-hidden",
            crate::ast::AttributeValue::BooleanAttribute(value),
        );
        self
    }
}
